# Instruções
- Faça uma cópia deste arquivo .md para um repositório próprio
- Resolva as 8 questões objetivas assinalando a alternativa correta e **justificando sua resposta.**
- Resolva as 2 questões dissertativas escrevendo no próprio arquivo .md
- Lembre-se de utilizar as estruturas de código como ``esta aqui com ` `` ou
```javascript
//esta aqui com ```
let a = "olá"
let b = 10
print(a)
```
- Resolva as questões com uso do Visual Studio Code ou ambiente similar.
- Teste seus códigos antes de trazer a resposta para cá.
- Cuidado com o uso de ChatGPT (e similares), pois entregar algo só para ganhar nota não fará você aprender. Não seja dependente da máquina!
- Ao final, publique seu arquivo lista_01.md com as respostas em seu repositório, e envie o link pela Adalove. 

# Questões objetivas
**1) Considerando a execução do código abaixo, indique a alternativa correta e justifique sua resposta.**
```javascript
console.log(x);
var x = 5;
console.log(y);
let y = 10;
```
a) A saída será undefined seguido de erro 

b) A saída será 5 seguido de 10

c) A saída será undefined seguido de undefined

d) A saída será erro em ambas as linhas que utilizam console.log

RESPOSTA: A correta é a alternativa a. Isso porque o "var" permite definir a variável fora do escopo, mas não atribui o seu valor, fazendo com que o "console.log(x)", consiga reconhecer a variável, mas não o número 5. Sendo assim, o resultado aparece como undefined. Já quanto ao "let", este não define a variável fora do escopo, fazendo com que o "console.log(y)", não consiga encontrar nada, dando como resultado um erro.


**2) O seguinte código JavaScript tem um erro que impede sua execução correta. Analise e indique a opção que melhor corrige o problema. Justifique sua resposta.**

```javascript
function soma(a, b) {
    if (a || b === 0) {
        return "Erro: número inválido";
    }
    return a + b;
}
console.log(soma(2, 0));
```

a) Substituir if (a || b === 0) por if (a === 0 || b === 0)

b) Substituir if (a || b === 0) por if (a === 0 && b === 0)

c) Substituir if (a || b === 0) por if (a && b === 0)

d) Remover completamente a verificação if (a || b === 0)

RESPOSTA: A correta é a alternativa "a". Isso porque é necessário atribuir um valor para cada variável, e quando uilizamos a estrutura "if (a || b === 0)", nada está sendo atribuído ao "a", o que levaria a função a entender qualquer valor que fosse atribuído a "a" como true, retornando "Erro: número inválido" em todas as situações, o que não é o objetivo. Para resolver isso, basta substituir if (a || b === 0) por if (a === 0 || b === 0), para que só apareça "Erro: número inválido", caso "a" ou "b" sejam iguais (em valor e em tipo) a 0.
______
**3) Ao executar esse código, qual será a saída no console? Indique a alternativa correta e justifique sua resposta.**
```javascript
function calcularPreco(tipo) {
    let preco;

    switch(tipo) {
        case "eletrônico":
            preco = 1000;
        case "vestuário":
            preco = 200;
            break;
        case "alimento":
            preco = 50;
            break;
        default:
            preco = 0;
    }

    return preco;
}

console.log(calcularPreco("eletrônico"));
```

a) O código imprime 1000.

b) O código imprime 200.

c) O código imprime 50.

d) O código gera um erro.

RESPOSTA: A alternativa correta é a letra "b". Isso porque, o console.log chama a variável eletrônico ao trazer a função calcular preço, mas quando o código é lido, o primeiro "break" que aparece é após o preço do vestuário, o que faz com que o sistema interprete que o valor se refere ao eletrônico também (já que ele lê apenas o último valor antes do break).

______
**4) Ao executar esse código, qual será a saída no console? Indique a alternativa correta e justifique sua resposta.**
```javascript
let numeros = [1, 2, 3, 4, 5];

let resultado = numeros.map(x => x * 2).filter(x => x > 5).reduce((a, b) => a + b, 0);

console.log(resultado);
```
a) 0

b) 6

c) 18

d) 24

RESPOSTA: A alternativa correta é a letra "d". Para ficar mais claro, vou dividir a explicação em partes:
- "let numeros = [1, 2, 3, 4, 5]": cria a variável números e assim, define quais serão utilizados ao longo do código (1,2,3,4,5);
- "let resultado =": define que o resultado da expressão que segue após o sinal de igualdade é o resultado;
- "numeros.map(x => x * 2)": mapeia os números e multiplica cada um por dois;
- ".filter(x => x > 5)": filtra os números obtidos, naqueles que tiveram como resultado um valor acima de 5;
- ".reduce((a, b) => a + b, 0)": define 0 como o valor inicial, portanto a = 0, porém este vai sendo acumulado ao longo das iterações, então: a = 0, a = 6 e a = 14. Além disso, o b é o elemento atual de cada iteração, (6, 8, 10). As somas ficam da seguinte forma: 0 + 6; 6 + 8; 14 + 10. Assim, o resultado após a última iteração é 24. Vale lembrar que esse método faz com que a soma aconteça até a última iteração, por isso continua somando e não para no 6. De maneira resumida, nessa parte os valores que restaram são somados para reduzir a um único valor.
- "console.log(resultado)": manda imprimir o valor da variável "resultado".
______
**5) Qual será o conteúdo do array lista após a execução do código? Indique a alternativa correta e justifique sua resposta.**

```javascript
let lista = ["banana", "maçã", "uva", "laranja"];
lista.splice(1, 2, "abacaxi", "manga");
console.log(lista);
```

a) ["banana", "maçã", "uva", "abacaxi", "manga", "laranja"]

b) ["banana", "abacaxi", "manga"]

c) ["banana", "abacaxi", "manga", "laranja"]

d) ["banana", "maçã", "uva", "abacaxi", "manga"]

RESPOSTA: A alterativa correta é a letra "c". Isso se explica porque o "splice" tem a seguinte estrutura: [start, deleteCount, item1, item2,...], sendo que start = posição do primeiro termo que será abordado; deleteCount = quantidade de termos que serão deletados a partir da posição dita anteriormente; item1 e item2 = termos que serão adicionados. 
Analisando essa estrutura sendo aplicada ao exemplo acima: lista.splice(1, 2, "abacaxi", "manga") -> 1 = posição 1, portanto, o primeiro termo é a maçã, já que a contagem na programação sempre começa do 0 (que seria a banana), já o 2 se refere a quantidade de termos que serão deletados a partir da maçã, logo a maçã e a uva serão deletadas da sequência. Além disso, o abacaxi e a manga seriam os "item1" e "item2", o que significa que serão os termos adicionados a sequência, substituindo aqueles que foram deletados. Por fim, resta a laranja no final, que assim como a banana, não sofreu nenhuma alteração.
______
**6) Abaixo há duas afirmações sobre herança em JavaScript. Indique a alternativa correta e justifique sua resposta**

I. A herança é utilizada para compartilhar métodos e propriedades entre classes em JavaScript, permitindo que uma classe herde os métodos de outra sem a necessidade de repetir código.  
II. Em JavaScript, a herança é implementada através da palavra-chave `extends`.


a) As duas afirmações são verdadeiras, e a segunda justifica a primeira.

b) As duas afirmações são verdadeiras, mas a segunda não justifica a primeira.

c) A primeira afirmação é verdadeira, e a segunda é falsa.

d) A primeira afirmação é falsa, e a segunda é verdadeira.

RESPOSTA: A alternativa correta é a letra A, pois ambas as setenças estão corretas. Além disso, a II justifica a primeira, já que mostra como que a herança é implementada, que é o que torna possível o compartilhamento de métodos e propriedades entre as classes.
______
**7) Dado o seguinte código. Indique a alternativa correta e justifique sua resposta.**

```javascript
class Pessoa {
  constructor(nome, idade) {
    this.nome = nome;
    this.idade = idade;
  }

  apresentar() {
    console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);
  }
}

class Funcionario extends Pessoa {
  constructor(nome, idade, salario) {
    super(nome, idade);
    this.salario = salario;
  }

  apresentar() {
    super.apresentar();
    console.log(`Meu salário é R$ ${this.salario}.`);
  }
}
```


I) A classe Funcionario herda de Pessoa e pode acessar os atributos nome e idade diretamente.  
II) O método `apresentar()` da classe Funcionario sobrepõe o método `apresentar()` da classe Pessoa, mas chama o método da classe pai usando `super`.  
III) O código não funciona corretamente, pois Funcionario não pode herdar de Pessoa como uma classe, já que o JavaScript não suporta herança de classes.

Quais das seguintes afirmações são verdadeiras sobre o código acima?

a) I e II são verdadeiras.

b) I, II e III são verdadeiras.

c) Apenas II é verdadeira.

d) Apenas I é verdadeira.

RESPOSTA: A alternativa correta é a letra "a". A I está certa, pois o "super" faz com que consiga acessar os atributos nome e idade. A II também está certa, em razão da classe Funcionário ser depois da classe Pessoa, o que faz com que o método "apresentar()" do Funcionário se sobreponha ao que apareceu primeiro, além de conseguir herdar a estrutura do apresentar da classe Pessoa, usando o "super()". Já a III está incorreta, pois o JavaScript suporta sim herança de classes. 

______

**8) Analise as afirmações a seguir. Indique a alternativa correta e justifique sua resposta.**

**Asserção:** O conceito de polimorfismo em Programação Orientada a Objetos permite que objetos de diferentes tipos respondam à mesma mensagem de maneiras diferentes.  
**Razão:** Em JavaScript, o polimorfismo pode ser implementado utilizando o método de sobrecarga de métodos em uma classe.

a) A asserção é falsa e a razão é verdadeira.

b) A asserção é verdadeira e a razão é falsa.

c) A asserção é verdadeira e a razão é verdadeira, mas a razão não explica a asserção.

d) A asserção é verdadeira e a razão é verdadeira, e a razão explica a asserção.

RESPOSTA: A alternativa correta é a letra b. Isso porque a asserção está correta, mas a razão, ao dizer que utiliza o método de sobrecarga, se invalida, já que na linguagem JavaScript, o método utilizado é o de sobrescritos. A diferença das duas está no fato de que a sobrecarga ocorre quando o método tem o mesmo nome que outro, mas o retorno é diferente, enquanto o sobrescritos occore quando a subclasse redefine o que foi herdado da classe pai.

______

# Questões dissertativas
9) O seguinte código deve retornar a soma do dobro dos números de um array, mas contém erros. Identifique os problema e corrija o código para que funcione corretamente. Adicione comentários ao código explicado sua solução para cada problema.

```javascript
function somaArray(numeros) {

    for (i = 0; i < numeros.size; i++) {
        soma = 2*numeros[i];
    }
    return soma;
}
console.log(somaArray([1, 2, 3, 4]));



CORREÇÃO DO CÓDIGO: 
function somaArray(numeros) {
    let soma = 0; //defini a soma -> coloquei como = 0 para dar um ponto de partida, sem influenciar no valor da soma (como aconteceria, se eu colocasse 1, já que o resultado saíria 21)

    for (i = 0; i < numeros.length; i++) { //mudei de size para length, já que length é o termo correto para acessar todos os números 
        soma += 2*numeros[i];
    }
    return soma;
}
console.log(somaArray([1, 2, 3, 4]));


```
______
10) Crie um exemplo prático no qual você tenha duas classes:

- Uma classe `Produto` com atributos `nome` e `preco`, e um método `calcularDesconto()` que aplica um desconto fixo de 10% no preço do produto.
- Uma classe `Livro` que herda de `Produto` e modifica o método `calcularDesconto()`, aplicando um desconto de 20% no preço dos livros.

Explique como funciona a herança nesse contexto e como você implementaria a modificação do método na classe `Livro`.

RESPOSTA: A herança permite que objetos herdem propriedades de outros objetos, tornando mais fácil e clara a realização do código. Nesse caso, a herança funciona quando a segunda classe (livro) é criada e esta, após ser criada e abrir o seu "constructor", retoma os elementos da primeira (produto), a partir do uso do "super". 
ALém disso, para modificar o método na classe "Livro", eu implementei o "- this,preco*0.2", o que fez com que o desconto sobre o produto fosse alterado, e assim, o valor na resposta também. Ademais, adicionei o "categoria",  para identificar qual o gênero de livro, por meio do constructor e do "this.categoria = categoria", já que o termo não havia sido citado anteriormente.

```javascript 
class Produto { 
    //criando a primeira classe e aplicando o desconto inicial
    constructor(nome, preco) {
        this.nome = nome; 
        this.preco = preco;
            
        }
        calcularDesconto() {
            return this.preco - this.preco*0.1
        }
    }
class Livro extends Produto {
    constructor(nome, preco, categoria) {
        super(nome, preco); //o super é utilizado para chamar o constructor da classe do Produto
        this.categoria = categoria;

    }
    calcularDesconto() {
        return this.preco - this.preco*0.2
    }
}
//testando se o código funcionou
let produto1 = new Livro("Algebra", 200);
console.log(produto1.calcularDesconto())